{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Swift Package Manager for Kotlin Multiplatform","text":"<p>The Swift Package Manager for Kotlin Multiplatform Plugin, aka <code>spmForKmp</code> Gradle Plugin, is a tool designed to simplify integrating Swift Package Manager (SPM) dependencies into Kotlin Multiplatform (KMP) projects and calling the native API.</p> <p>It allows you to (almost) effortlessly configure and use Swift packages in your Kotlin projects targeting Apple platforms, such as iOS.</p> <p>Please Be Aware</p> <p>Pure Swift packages can't be exported to Kotlin; creating a bridge with this plugin is a solution to bypass this issue.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Create a Swift&lt;-&gt;Kotlin bridge: Use your own Swift code for functionality that can't be done in Kotlin.</li> <li>Import Swift-compatible code to Kotlin: Enable SPM dependencies and your own Swift code to be exposed directly in your Kotlin code (if compatible).</li> </ul>"},{"location":"#feedback","title":"Feedback","text":"<p>This project greatly needs feedback, feature requests, and information about the edge case for progressing; let's talk.</p>"},{"location":"#full-example","title":"Full example","text":"<p>A full example is available for people wanted to see the usage.</p>"},{"location":"bridge/","title":"Basic configuration","text":""},{"location":"bridge/#gradle","title":"Gradle","text":"<p>The following configuration is a simple bridge between Kotlin and Swift.</p> build.gradle.kts<pre><code>swiftPackageConfig {\n    create(\"[cinteropName]\") {\n    }\n}\n</code></pre> <p>When syncing the project, the plugin creates a folder at <code>src/swift/[cinteropname]</code>.</p> <p>The content of this folder is your bridge between Swift and Kotlin, it can contain only Swift source files or no file.</p>"},{"location":"bridge/#example","title":"Example","text":"<p>Make your Swift code compatible with Kotlin.</p> <p>Your Swift code needs to be marked as @objc/@objcMembers and the visibility set as <code>public</code> or it won't be exported and available from your Kotlin code.</p> src/swift/[cinteropname]/mySwiftFile.swift<pre><code>@objcMembers public class MySwiftBridge: NSObject {\n    public func exportedMethod() -&gt; String {\n        return \"value\"\n    }\n}\n</code></pre> iosMain/kotlin/com/example/myKotlinFile.kt<pre><code>import [cinteropname].MySwiftBridge\n\nval contentFromSwift = MySwiftBridge().exportedMethod()\n</code></pre>"},{"location":"bridgeWithDependencies/","title":"Using external dependencies","text":"<p>On completion with the basic configuration, it's possible to use external dependency with your bridge.</p> <p>The Plug-in reproduces the CocoaPods plugin behavior with the same kind of issues about third-party dependency but less intrusively.</p> <p>Note: If your package doesn't work with the plugin, please create an issue.</p>"},{"location":"bridgeWithDependencies/#gradle","title":"Gradle","text":"<p>The following configuration imports the package CryptoSwift which is a pure Swift library, that can't be used directly in Kotlin. build.gradle.kts<pre><code>swiftPackageConfig {\n    create(\"[cinteropName]\") {\n        dependency(\n            SwiftDependency.Package.Remote.Version(\n                url = URI(\"https://github.com/krzyzanowskim/CryptoSwift.git\"),\n                products = {\n                    add(\"CryptoSwift\")\n                },\n                version = \"1.8.4\",\n            )\n        )\n    }\n}\n</code></pre></p> <p>Warning</p> <p>A local swift package is being generated during the build and this message diplayed <pre><code>Spm4Kmp: A local Swift package has been generated at\n/path/to/the/local/package\nPlease add it to your xcode project as a local package dependency.\n</code></pre> Add the folder to your Xcode project as a Local package, that's all.</p> <p>Note : When updating your configuration, reset the package cache to apply the modification.</p>"},{"location":"bridgeWithDependencies/#example","title":"Example","text":"<p>Make your Swift code compatible with Kotlin.</p> <p>Your Swift code needs to be marked as @objc/@objcMembers and the visibility set as <code>public</code> or it won't be exported and available from your Kotlin code.</p> src/swift/[cinteropname]/mySwiftFile.swift<pre><code>import Foundation\nimport CryptoSwift\n\n@objcMembers public class MySwiftBridge: NSObject {\n    public func toMD5(value: String) -&gt; String {\n        return value.md5()\n    }\n}\n</code></pre> iosMain/kotlin/com/example/myKotlinFile.kt<pre><code>import [cinteropname].MySwiftBridge\n\nval contentFromSwift = MySwiftBridge().toMD5(value = \"someString\")\n</code></pre>"},{"location":"bridgeWithDependencies/#supported-dependency-sources","title":"Supported Dependency Sources","text":"<p>The plugin supports the following configurations :</p> VersionCommitBranchLocalLocal BinaryRemote Binary <pre><code>SwiftDependency.Package.Remote.Version(\n    url = URI(\"https://github.com/krzyzanowskim/CryptoSwift.git\"),\n    version = \"1.8.4\",\n    products = {\n        add(\"CryptoSwift\")\n    },\n)\n</code></pre> <pre><code>SwiftDependency.Package.Remote.Commit(\n    url = URI(\"https://github.com/krzyzanowskim/CryptoSwift.git\"),\n    revision = \"729e01bc9b9dab466ac85f21fb9ee2bc1c61b258\",\n    products = {\n        add(\"CryptoSwift\")\n    },\n)\n</code></pre> <pre><code>SwiftDependency.Package.Remote.Branch(\n    url = URI(\"https://github.com/krzyzanowskim/CryptoSwift.git\"),\n    branch = \"main\",\n    products = {\n        add(\"CryptoSwift\")\n    },\n),\n</code></pre> <pre><code>SwiftDependency.Package.Local(\n    path = \"Absolute path to the local package folder\",\n    packageName = \"LocalSourceDummyFramework\",\n    products = {\n        add(\"LocalSourceDummyFramework\")\n    },\n),\n</code></pre> <pre><code>SwiftDependency.Binary.Local(\n    path = \"/path/to/LocalFramework.xcframework\"\n    packageName = \"LocalFramework\"\n),\n</code></pre> <pre><code>SwiftDependency.Binary.Remote(\n    url = URI(\"https://.../RemoteBinaryFramework.xcframework.zip\"),\n    checksum = \"[checksum]\",\n    packageName = \"RemoteBinaryFramework\",\n)\n</code></pre> <p>Note</p> <p>Using Local/Remote binary require some knowledge.</p>"},{"location":"bridgeWithDependencies/#_1","title":"Using external dependencies","text":""},{"location":"exportingDependencies/","title":"Export Dependencies to Kotlin","text":"<p>On completion with using external dependencies, it's possible to export them to Kotlin, if there are compatible.</p>"},{"location":"exportingDependencies/#gradle","title":"Gradle","text":"<p>The following configuration export to Kotlin the package FirebaseAnalytics which is a ObjC library.</p> <p>You can try to export a pure Swift library, but only basic ObjC will be available.</p> build.gradle.kts<pre><code>swiftPackageConfig {\n    create(\"[cinteropName]\") {\n        dependency(\n            SwiftDependency.Package.Remote.Version(\n                url = URI(\"https://github.com/firebase/firebase-ios-sdk.git\"),\n                products = {\n                    add(\"FirebaseAnalytics\", exportToKotlin = true), // exported\n                    add(\"FirebaseCore\") // non-exported\n                },\n                version = \"11.8.0\",\n            )\n        )\n    }\n}\n</code></pre> <p>Warning</p> <p>A local swift package is being generated during the build and this message diplayed <pre><code>Spm4Kmp: A local Swift package has been generated at\n/path/to/the/local/package\nPlease add it to your xcode project as a local package dependency.\n</code></pre> Add the folder to your Xcode project as a Local package, that's all.</p> <p>Note : When updating your configuration, reset the package cache to apply the modification.</p>"},{"location":"exportingDependencies/#example","title":"Example","text":"iosMain/kotlin/com/example/myKotlinFile.kt<pre><code>import FirebaseAnalytics.FIRConsentStatusGranted\n\n@ExperimentalForeignApi\nval consentStatusGranted = FIRConsentStatusGranted\n</code></pre> <p>Note</p> <p>The bridge can remain empty as we don't need it; we only want to use the exported product.</p>"},{"location":"license/","title":"License","text":"<p>The MIT License (MIT) Copyright (c) 2025 Fran\u00e7ois Dabonot</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"multiTarget/","title":"Multi target configuration","text":""},{"location":"multiTarget/#5-configuration-by-target","title":"5. Configuration by target","text":"<p>You can set a different configuration for each target you manage.</p> build.gradle.kts<pre><code>listOf(\n    iosX64(),\n    iosSimulatorArm64(),\n).forEach {\n    it.compilations {\n        val main by getting {\n            cinterops.create(\"nativeIosShared\") // a config for iOS\n        }\n    }\n}\n\nlistOf(\n    macosArm64(),\n).forEach {\n    it.compilations {\n        val main by getting {\n            cinterops.create(\"nativeMacosShared\") // a config for macos\n        }\n    }\n}\n\nswiftPackageConfig {\n    create(\"nativeIosShared\") {\n        // your embedded swift is inside the folder src/swift/nativeIosShared\n        // your config for iOS\n    }\n    create(\"nativeMacosShared\") {\n        // your embedded swift is inside the folder src/swift/nativeMacosShared\n        // your config for macOS\n    }\n}\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#requirement","title":"Requirement","text":"<ul> <li>Macos With Xcode 16 and later</li> <li>Kotlin : 2.1.0 and later</li> <li>Gradle : 8.12 recommended</li> </ul>"},{"location":"setup/#plugins","title":"Plugins","text":"build.gradle.kts<pre><code>plugins {\n    id(\"org.jetbrains.kotlin.multiplatform\")\n    id(\"io.github.frankois944.spmForKmp\") version \"[version]\"\n}\n</code></pre>"},{"location":"setup/#gradle-properties","title":"Gradle Properties","text":"gradle.properties<pre><code>kotlin.mpp.enableCInteropCommonization=true\n</code></pre>"},{"location":"setup/#initial-configuration","title":"Initial configuration","text":"build.gradle.kts<pre><code>kotlin {\n    listOf(\n        iosArm64(),\n        iosSimulatorArm64()\n        // and more Apple targets...\n    ).forEach {\n        it.compilations {\n            val main by getting {\n                // Choose the cinterop name\n                cinterops.create(\"[cinteropName]\")\n            }\n        }\n    }\n}\n\nswiftPackageConfig {\n    create(\"[cinteropName]\") { // must match with cinterops.create name\n    }\n}\n</code></pre>"},{"location":"setup/#swiftpackageconfig","title":"swiftPackageConfig","text":""}]}